{
  "name": "iconv-jp",
  "main": "iconv-jp",
  "version": "1.1.3",
  "description": "Text recoding in JavaScript for fun and profit! fork from https://github.com/bnoordhuis/node-iconv",
  "homepage": "https://github.com/xenophy/node-iconv",
  "author": {
    "name": "Kazuhiro Kotsutsumi",
    "email": "kotsutsumi@xenophy.com",
    "url": "http://www.xenophy.com/"
  },
  "scripts": {
    "preinstall": "node-waf configure",
    "install": "node-waf build install"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/xenophy/node-iconv.git"
  },
  "engines": {
    "node": ">=0.3.0"
  },
  "readme": "# node-iconv\n\nText recoding in JavaScript for fun and profit!  \nPowerd by [GNU libiconv-1.9.1](http://ftp.gnu.org/gnu/libiconv/libiconv-1.9.1.tar.gz)  \nThe [libiconv-1.9.1-ja-patch-1.diff.gz](http://www2d.biglobe.ne.jp/~msyk/software/libiconv-1.9.1-patch.html) was applied.  \nIt will solve the problem to Japanese.  \n\n---\nin Japanese:  \nnodeでiconvを利用するためのライブラリです。  \nGNU libiconv-1.9.1をベースに[libiconv-1.9.1-ja-patch-1.diff.gz](http://www2d.biglobe.ne.jp/~msyk/software/libiconv-1.9.1-patch.html)を適用したものを利用しています。  \nこれにより、libiconvで起こる様々な日本語に対する問題を回避することができます。\n\n\n## Installing with [npm](http://npmjs.org/)\n\n\tnpm install iconv-jp\n\nNote that the npm-ified version of node-iconv only\nworks with node.js >= v0.3.0.\n\n## Compiling\n\nTo compile and install the module, type:\n\n\tmake install NODE_PATH=/path/to/nodejs\n\nNODE_PATH will default to `/usr/local` if omitted.\n\nNote that you do not need to have a copy of libiconv installed to use this module.\n\n## Usage\n\nEncode from one character encoding to another:\n\n\t// convert from UTF-8 to ISO-8859-1\n\tvar Buffer = require('buffer').Buffer;\n\tvar Iconv  = require('iconv').Iconv;\n\tvar assert = require('assert');\n\t\n\tvar iconv = new Iconv('UTF-8', 'ISO-8859-1');\n\tvar buffer = iconv.convert('Hello, world!');\n\tvar buffer2 = iconv.convert(new Buffer('Hello, world!'));\n\tassert.equals(buffer.inspect(), buffer2.inspect());\n\t// do something useful with the buffers\n\nLook at test.js for more examples and node-iconv's behaviour under error conditions.\n\n## Notes\n\nThings to keep in mind when you work with node-iconv.\n\n### Chunked data\n\nSay you are reading data in chunks from a HTTP stream. The logical input is a single document (the full POST request data) but the physical input will be spread over several buffers (the request chunks).\n\nYou must accumulate the small buffers into a single large buffer before performing the conversion. If you don't, you will get unexpected results with multi-byte and stateful character sets like UTF-8 and ISO-2022-JP.\n\n[node-buffertools](http://github.com/bnoordhuis/node-buffertools) lets you concatenate buffers painlessly. See the description of `buffertools.concat()` for details.\n\n### Dealing with untranslatable characters\n\nCharacters are not always translatable to another encoding. The UTF-8 string\n\"ça va が\", for example, cannot be represented in plain 7-bits ASCII without\nsome loss of fidelity.\n\nBy default, node-iconv throws EILSEQ when untranslatabe characters are encountered\nbut this can be customized. Quoting the `iconv_open(3)` man page:\n\n\t//TRANSLIT\n\t\tWhen  the  string  \"//TRANSLIT\"  is appended to tocode, transliteration is activated.\n\t\tThis means that when a character cannot be represented in the target character set,\n\t\tit can be approximated through one or several similarly looking characters.\n\n\t//IGNORE\n\t\tWhen the string \"//IGNORE\" is appended to tocode, characters that cannot be represented\n\t\tin the target character set will be silently discarded.\n\nExample usage:\n\n\tvar iconv = new Iconv('UTF-8', 'ASCII');\n\ticonv.convert('ça va'); // throws EILSEQ\n\n\tvar iconv = new Iconv('UTF-8', 'ASCII//IGNORE');\n\ticonv.convert('ça va'); // returns \"a va\"\n\n\tvar iconv = new Iconv('UTF-8', 'ASCII//TRANSLIT');\n\ticonv.convert('ça va'); // \"ca va\"\n\n\tvar iconv = new Iconv('UTF-8', 'ASCII//TRANSLIT//IGNORE');\n\ticonv.convert('ça va が'); // \"ca va \"\n\n### EINVAL\n\nEINVAL is raised when the input ends in a partial character sequence. This is a feature,\nnot a bug.\n",
  "_id": "iconv-jp@1.1.3",
  "_from": "iconv-jp"
}
